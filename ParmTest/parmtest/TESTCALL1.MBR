      *****************************************************************************
      *   Programm     : TESTCALL1                                                *
      *   Beschreibung : Starten von Java Prozessen mit Parametern                *
      *                                                                           *
      *   erstellt am  : 13.08.2017 von Guido Zeuner                              *
      *                                                                           *
      *   Beispiel-Aufruf                                                         *
      *   CALL PGM(TESTCALL) PARM('user.country')                                 *
      *****************************************************************************
     H DFTACTGRP(*NO)
     H ACTGRP(*CALLER)

      //Prototype-/Interface with Parameter to call this PGM
     D entry           PR                  ExtPgm('TESTCALL1')
     D  pKey                         20a   Const OPTIONS(*VARSIZE)

     D entry           PI
     D  pKey                         20a   Const OPTIONS(*VARSIZE)

      //Prototype for Calls to QCMDEXC
     D ExecCmd         Pr                  ExtPgm('QCMDEXC')
     D  Cmd                        2048a   Const
     D  CmdLen                       15  5 Const

      //Variable for Command-Output to QCMDEXC
     D CmdLength       s             15  5

      //Field to store a ShellCommand
     D shellCommand    S           1024A   varying

      //Field to store the length of a Parameter
     D parmLength      s             10I 0

      //Used for Output of the results via DSPLY
     D resultContent   s             52a   varying

      //Java-Classpath
     D CLASSPATH       s           2048a   varying

      //Prototype - get Value of s String
     D getBytes        PR         65535A   EXTPROC(*JAVA:
     D                                       'java.lang.String':
     D                                       'getBytes') VARYING

      //Prototype - get length of an Java Object Array
     D getArrayLength  PR            10I 0  EXTPROC(*JAVA:
     D                                       'parmtest.ParmTest':
     D                                       'getArrayLength')
     D arrObj                          O    CLASS(*JAVA:
     D                                      'java.lang.Object')
     D                                       DIM(500)

      //Prototype - Constructor for java String from Byte array
     D makeString      PR              O    EXTPROC(*JAVA:
     D                                       'java.lang.String':
     D                                       *CONSTRUCTOR)
     D  bytes                      1024A    CONST VARYING


      //Prototype - Constructor for java IntegerObj from INT(10)
     D makeInteger     PR              O     EXTPROC(*JAVA:
     D                                        'java.lang.Integer':
     D                                       *CONSTRUCTOR)
     D  integer                      10I 0    value


      //Prototype - Constructor for ParmTest.class
     D createParmTest  PR              O    EXTPROC(*JAVA:
     D                                       'parmtest.ParmTest':
     D                                       *CONSTRUCTOR)

      //Prototype - Method String getProperty(String key) in ParmTest.class
     D getProperty     PR              O    CLASS(*JAVA:
     D                                      'java.lang.String')
     D                                      EXTPROC(*JAVA:
     D                                      'parmtest.ParmTest':
     D                                      'getProperty')
     D keyObj                          O    CLASS(*JAVA:
     D                                      'java.lang.String')

      //Prototype - Method String[] getProperties() in ParmTest.class
     D getProperties   PR              O    CLASS(*JAVA:
     D                                      'java.lang.String')
     D                                      DIM(500)
     D                                      EXTPROC(*JAVA:
     D                                      'parmtest.ParmTest':
     D                                      'getProperties')


      //Field to store a property key as Java String Object
     D parmTestObj     S               O    CLASS(*JAVA:'ParmTest')
      //Field to store the passed in property Key
     D key             S             50A    VARYING
      //Field to store a property key as Java String Object
     D keyObj          S               O    CLASS(*JAVA:'java.lang.String')
      //Field to store the return result
     D result          S           1024A    VARYING
      //Field to store a result as Java String Object
     D resObj          S               O    CLASS(*JAVA:'java.lang.String')
      //Field to store the ArrayLength
     D arrayLength     S             10I 0
      //Index for array Elements
     D arrayElement    S             10I 0
      //Field to store results as Java String Object
     D resArrayObj     S               O    CLASS(*JAVA:'java.lang.String')
     D                                      DIM(500)


      /free

       exSr setCLASSPATH;

       parmLength = %len(%trim(pKey));
       key = %subst(pKey:1:parmLength);
       keyObj = makeString(key);
       parmTestObj = createParmTest();

       if key = 'list';
         resArrayObj = getProperties(parmTestObj);
         arrayLength = getArrayLength(parmTestObj:resArrayObj);
         for arrayElement = 1 to arrayLength;
            resObj = resArrayObj(arrayElement);
            if resObj <> *NULL;
               result = getBytes(resObj);
               resultContent = result;
               dsply resultContent;
            endif;
         endfor;
         exsr wait;
       else;
       resObj = getProperty(parmTestObj:keyObj);
       result = getBytes(resObj);
       resultContent = result;
       dsply resultContent;
       exsr wait;
       endif;

       *Inlr = *On;

        //Set Classpath ENV-VAR via QCMDEXC
       begsr setCLASSPATH;

         CLASSPATH = '/home/YOURLIB/ParmTest.jar';

         shellCommand = 'ADDENVVAR ENVVAR(CLASSPATH) VALUE(''' +
                         CLASSPATH + ''') REPLACE(*YES)';
         CmdLength = %len(%trim(shellCommand));
         ExecCmd(shellCommand:cmdLength);
       endsr;

        //DelayJob via QCMDEXC
       begsr wait;

         shellCommand = 'QSYS/DLYJOB DLY(2)';
         CmdLength = %len(%trim(shellCommand));
         ExecCmd(shellCommand:cmdLength);
       endsr;

      /end-free

